import OpenAI from 'openai';
import { Octokit } from '@octokit/rest';
import { execSync } from 'child_process';
import fs from 'fs-extra';
import 'dotenv/config';

// Initialize OpenAI client
const openai = new OpenAI();

// Initialize Octokit client
const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN,
});

const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
const ISSUE_NUMBER = process.env.ISSUE_NUMBER;

async function fetchIssueDetails() {
  const { data } = await octokit.issues.get({
    owner,
    repo,
    issue_number: ISSUE_NUMBER,
  });
  return `${data.title}\n\n${data.body}`;
}

async function fetchRepoFiles(dir = '') {
  let files = [];
  const { data } = await octokit.repos.getContent({ owner, repo, path: dir });

  for (const item of data) {
    if (item.type === 'file') {
      files.push(item.path);
    } else if (item.type === 'dir') {
      files = files.concat(await fetchRepoFiles(item.path)); // Recursively fetch all files
    }
  }
  return files;
}

async function fetchFileContent(filePath) {
  const { data } = await octokit.repos.getContent({ owner, repo, path: filePath });
  return Buffer.from(data.content, 'base64').toString('utf-8');
}

async function generateRepoSummary(fileList) {
  let repoSummary = '';
  for (let file of fileList) {
    const fileContent = await fetchFileContent(file);
    repoSummary += `### File: ${file}\n${fileContent.slice(0, 500)}\n\n`; // Limit content size to prevent token overflow
  }
  return repoSummary;
}

async function modifyCodeWithChatGPT(issueDetails, repoSummary) {
  const response = await openai.chat.completions.create({
    model: 'gpt-4',
    messages: [
      { role: 'system', content: 'You are an AI developer improving code based on user requests.' },
      { role: 'user', content: `### Issue Details:\n${issueDetails}\n\n### Repo Structure and Content:\n${repoSummary}\n\n### Modify the code to fix the issue.` },
    ],
  });

  return response.choices[0].message.content.trim();
}

async function createPullRequest() {
  const branchName = `auto-fix-issue-${ISSUE_NUMBER}`;
  execSync(`git checkout -b ${branchName}`);
  execSync('git add .');
  execSync('git commit -m "Auto-fix by ChatGPT"');
  execSync(`git push origin ${branchName}`);

  await octokit.pulls.create({
    owner,
    repo,
    title: `Auto-fix: Issue #${ISSUE_NUMBER}`,
    head: branchName,
    base: 'main',
    body: `This PR was automatically generated by ChatGPT to address issue #${ISSUE_NUMBER}.`,
  });
}

(async function run() {
  try {
    const issueDetails = await fetchIssueDetails();
    const allFiles = await fetchRepoFiles();

    console.log('Fetching repo content...');
    const repoSummary = await generateRepoSummary(allFiles); // Fetch and summarize the entire repo

    console.log('Sending repo summary to ChatGPT...');
    const modifiedCode = await modifyCodeWithChatGPT(issueDetails, repoSummary);

    // Write the modified code back to files
    const modifiedFiles = modifiedCode.split('\n\n');
    for (const modifiedFile of modifiedFiles) {
      const [filePath, ...codeLines] = modifiedFile.split(':');
      const code = codeLines.join(':').trim();
      if (code) {
        fs.writeFileSync(filePath, code, 'utf-8');
      }
    }

    await createPullRequest();
  } catch (error) {
    console.error('Error during automation:', error);
  }
})();
